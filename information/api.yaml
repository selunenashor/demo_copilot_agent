openapi: 3.0.3
info:
  title: Basic Reminder App API
  description: API specification for the Basic Appointment Reminder application using Laravel and React-TS. Allows users to manage accounts and appointments.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api # Example local Laravel dev server
    description: Development server
  # - url: https://api.yourdomain.com/v1 # Example production server
  #   description: Production server

tags:
  - name: Authentication
    description: User registration, login, logout.
  - name: Appointments
    description: Operations related to creating, reading, updating, and deleting appointments.

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name: { type: string, example: "John Doe" }
                email: { type: string, format: email, example: "user@example.com" }
                password: { type: string, format: password, example: "password123" }
                password_confirmation: { type: string, format: password, example: "password123" }
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error (e.g., email exists, passwords don't match)
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Server error
          $ref: '#/components/responses/ServerError'

  /login:
    post:
      tags: [Authentication]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email, example: "user@example.com" }
                password: { type: string, format: password, example: "password123" }
      responses:
        '200':
          description: Login successful, returns access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string, example: "1|abcdef..." }
                  token_type: { type: string, example: "Bearer" }
                  user: { $ref: '#/components/schemas/User' }
        '401':
          description: Invalid credentials
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Validation Error
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Server error
          $ref: '#/components/responses/ServerError'

  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Logged out successfully." }
        '401':
          description: Not authenticated
          $ref: '#/components/responses/Unauthorized'

  /user:
    get:
      tags: [Authentication]
      summary: Get current logged-in user's details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          $ref: '#/components/responses/Unauthorized'

  /appointments:
    get:
      tags: [Appointments]
      summary: List all appointments for the current user
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 15
        - name: sort_by
          in: query
          description: Field to sort by (e.g., appointment_time)
          required: false
          schema:
            type: string
            enum: [appointment_time, created_at, title]
            default: appointment_time
        - name: sort_direction
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of appointments (paginated)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  links: # Laravel Pagination Links
                    type: object
                    properties:
                      first: { type: string, format: url, nullable: true }
                      last: { type: string, format: url, nullable: true }
                      prev: { type: string, format: url, nullable: true }
                      next: { type: string, format: url, nullable: true }
                  meta: # Laravel Pagination Meta
                    type: object
                    properties:
                       current_page: { type: integer }
                       from: { type: integer, nullable: true }
                       last_page: { type: integer }
                       path: { type: string, format: url }
                       per_page: { type: integer }
                       to: { type: integer, nullable: true }
                       total: { type: integer }
        '401': { $ref: '#/components/responses/Unauthorized' }

    post:
      tags: [Appointments]
      summary: Create a new appointment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentInput'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

  /appointments/{appointmentId}:
    get:
      tags: [Appointments]
      summary: Get details of a specific appointment
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AppointmentId'
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' } # If trying to access someone else's appointment
        '404': { $ref: '#/components/responses/NotFound' }

    put:
      tags: [Appointments]
      summary: Update a specific appointment
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AppointmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentInput'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/ValidationError' }
        '500': { $ref: '#/components/responses/ServerError' }

    delete:
      tags: [Appointments]
      summary: Delete a specific appointment
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AppointmentId'
      responses:
        '204':
          description: Appointment deleted successfully (No Content)
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

components:
  schemas:
    # --- Base Entities ---
    User:
      type: object
      properties:
        id: { type: integer, readOnly: true, example: 1 }
        name: { type: string, example: "John Doe" }
        email: { type: string, format: email, example: "user@example.com" }
        email_verified_at: { type: string, format: date-time, nullable: true, readOnly: true }
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time, readOnly: true }

    Appointment:
      type: object
      properties:
        id: { type: integer, readOnly: true, example: 101 }
        user_id: { type: integer, readOnly: true, example: 1 }
        title: { type: string, example: "Meeting with Client X" }
        description: { type: string, nullable: true, example: "Discuss project milestones." }
        appointment_time: { type: string, format: date-time, example: "2025-12-15T14:30:00Z" }
        created_at: { type: string, format: date-time, readOnly: true }
        updated_at: { type: string, format: date-time, readOnly: true }

    # --- Input Schemas ---
    AppointmentInput:
      type: object
      required: [title, appointment_time]
      properties:
        title: { type: string, minLength: 1, example: "Team Sync" }
        description: { type: string, nullable: true, example: "Weekly team sync-up call." }
        appointment_time: { type: string, format: date-time, description: "Must be a future date/time in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ or equivalent)", example: "2025-12-20T10:00:00+07:00" }

    # --- Error Schemas ---
    Error:
      type: object
      properties:
        message: { type: string }

    ValidationErrorDetail:
       type: array
       items: { type: string }

    ValidationError:
       type: object
       properties:
         message: { type: string, example: "The given data was invalid." }
         errors:
           type: object
           description: "Object where keys are field names and values are arrays of error strings"
           additionalProperties:
              $ref: '#/components/schemas/ValidationErrorDetail'
           example:
             email: ["The email has already been taken."]
             password: ["The password confirmation does not match.", "The password must be at least 8 characters."]

  parameters:
    AppointmentId:
      name: appointmentId
      in: path
      required: true
      description: ID of the Appointment
      schema: { type: integer, example: 101 }

  responses:
    ValidationError:
      description: Validation Error - Invalid data provided in the request body.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }
    Unauthorized:
      description: Unauthorized - Authentication token is missing, invalid, or credentials failed.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error', properties: { message: { example: "Unauthenticated."} } }
    Forbidden:
      description: Forbidden - User does not have permission to access or modify this resource (e.g., accessing another user's appointment).
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error', properties: { message: { example: "This action is unauthorized."} } } # Laravel's default message
    NotFound:
      description: Not Found - The requested resource (e.g., appointment) could not be found.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error', properties: { message: { example: "Resource not found."} } }
    ServerError:
      description: Internal Server Error - An unexpected error occurred on the server.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error', properties: { message: { example: "Internal Server Error."} } }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Or Sanctum token

# Default security for most endpoints - requires Bearer token (except register/login)
# Security is applied per-path/operation where needed.